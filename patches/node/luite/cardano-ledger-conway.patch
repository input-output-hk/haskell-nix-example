diff --git a/src/Cardano/Ledger/Conway/Genesis.hs b/src/Cardano/Ledger/Conway/Genesis.hs
index 748c279..37412b4 100644
--- a/src/Cardano/Ledger/Conway/Genesis.hs
+++ b/src/Cardano/Ledger/Conway/Genesis.hs
@@ -24,7 +24,7 @@ import Cardano.Ledger.Conway.Governance
 import Cardano.Ledger.Conway.PParams (UpgradeConwayPParams, toUpgradeConwayPParamsUpdatePairs)
 import Cardano.Ledger.Conway.TxCert (Delegatee)
 import Cardano.Ledger.Credential (Credential)
-import Cardano.Ledger.Crypto (Crypto)
+import Cardano.Ledger.Crypto (Crypto, StandardCrypto)
 import Cardano.Ledger.DRep (DRepState)
 import Cardano.Ledger.Keys (KeyRole (..))
 import Data.Aeson (
@@ -58,13 +58,16 @@ data ConwayGenesis c = ConwayGenesis
 cgDelegsL :: Lens' (ConwayGenesis c) (ListMap (Credential 'Staking c) (Delegatee c))
 cgDelegsL = lens cgDelegs (\x y -> x {cgDelegs = y})

-instance Crypto c => NoThunks (ConwayGenesis c)
+instance Crypto c => NoThunks (ConwayGenesis c) where
+  {-# SPECIALIZE instance NoThunks (ConwayGenesis StandardCrypto) #-}

 -- | Genesis are always encoded with the version of era they are defined in.
 instance Crypto c => DecCBOR (ConwayGenesis c) where
+  {-# SPECIALIZE instance DecCBOR (ConwayGenesis StandardCrypto) #-}
   decCBOR = decode $ RecD ConwayGenesis <! From <! From <! From <! From <! From

 instance Crypto c => EncCBOR (ConwayGenesis c) where
+  {-# SPECIALIZE instance EncCBOR (ConwayGenesis StandardCrypto) #-}
   encCBOR (ConwayGenesis pparams constitution committee delegs initialDReps) =
     encode $
       Rec (ConwayGenesis @c)
@@ -75,10 +78,12 @@ instance Crypto c => EncCBOR (ConwayGenesis c) where
         !> To initialDReps

 instance Crypto c => ToJSON (ConwayGenesis c) where
+  {-# SPECIALIZE instance ToJSON (ConwayGenesis StandardCrypto) #-}
   toJSON = object . toConwayGenesisPairs
   toEncoding = pairs . mconcat . toConwayGenesisPairs

 instance Crypto c => FromJSON (ConwayGenesis c) where
+  {-# SPECIALIZE instance FromJSON (ConwayGenesis StandardCrypto) #-}
   parseJSON =
     withObject "ConwayGenesis" $ \obj -> do
       upgradeProtocolPParams <- parseJSON (Object obj)
@@ -89,6 +94,7 @@ instance Crypto c => FromJSON (ConwayGenesis c) where
         <*> obj .:? "delegs" .!= mempty
         <*> obj .:? "initialDReps" .!= mempty

+{-# INLINE toConwayGenesisPairs #-}
 toConwayGenesisPairs :: (Crypto c, KeyValue e a) => ConwayGenesis c -> [a]
 toConwayGenesisPairs cg@(ConwayGenesis _ _ _ _ _) =
   let ConwayGenesis {..} = cg
@@ -100,4 +106,5 @@ toConwayGenesisPairs cg@(ConwayGenesis _ _ _ _ _) =
         ++ toUpgradeConwayPParamsUpdatePairs cgUpgradePParams

 instance Crypto c => Default (ConwayGenesis c) where
+  {-# SPECIALIZE instance Default (ConwayGenesis StandardCrypto) #-}
   def = ConwayGenesis def def def mempty mempty
